/*
 * @(#)TextAlgorithm.java 2023.1
 *
 * Copyright (c) 2023 by DPAEVD
 * All rights reserved
 */
package org.homedns.dpaevd.ai.lab.copilot;

/**
 * Code generated by Copilot
 *
 * @author Daniele Denti (daniele.denti@bluewin.ch)
 * @version 2023.1
 * @since 2023.1
 */
public class TextAlgorithm {

    int MAX_LEN = 50;

    char QUESTION_MARK = '?';

    char WILDCARD = '*';

    enum Mode {
        INSENSITIVE, NORMAL, WILDCARDS
    }

    static int weightedLevensteinDistance(final String word, final String template, final Mode mode, final int limit) {
        final int[][] d = new int[word.length() + 1][template.length() + 1];
        for (int i = 0; i <= word.length(); i++) {
            d[i][0] = i;
        }
        for (int j = 0; j <= template.length(); j++) {
            d[0][j] = j;
        }
        for (int i = 1; i <= word.length(); i++) {
            for (int j = 1; j <= template.length(); j++) {
                final int cost = (word.charAt(i - 1) == template.charAt(j - 1)) ? 0 : 1;
                d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1), d[i - 1][j - 1] + cost);
            }
        }
        return d[word.length()][template.length()];
    }
}
